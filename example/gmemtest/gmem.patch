diff --git a/mm/gmem.c b/mm/gmem.c
index 90a5b5fda..f339a05bf 100644
--- a/mm/gmem.c
+++ b/mm/gmem.c
@@ -676,50 +676,25 @@ static int hmadvise_do_prefetch(gm_dev_t *dev, unsigned long addr, size_t size)
 	return res;
 }
 
-static int hmadvise_do_eagerfree(unsigned long addr, size_t size)
+static int gmem_unmap_vma_pages(struct vm_area_struct *vma, unsigned long start,
+				unsigned long end, int page_size)
 {
-	int page_size = HPAGE_SIZE;
-	struct vm_area_struct *vma;
-	int ret = GM_RET_SUCCESS;
-	unsigned long start, end;
-	gm_mapping_t *gm_mapping;
 	struct gm_fault_t gmf = {
 		.mm = current->mm,
 		.size = page_size,
 		.copy = false,
 	};
-	unsigned long old_start;
+	gm_mapping_t *gm_mapping;
 	vm_object_t *obj;
+	int ret;
 
-	/* overflow */
-	if (check_add_overflow(addr, size, &end))
-		return -EINVAL;
-
-	old_start = addr;
-
-	/* Align addr by rounding inward to avoid excessive page release. */
-	end = round_down(end, page_size);
-	start = round_up(addr, page_size);
-	if (start >= end)
-		return ret;
-
-	/* Check to see whether len was rounded up from small -ve to zero */
-	if (old_start && !start)
+	obj = vma->vm_obj;
+	if (!obj) {
+		pr_err("gmem: peer-shared vma should have vm_object\n");
 		return -EINVAL;
+	}
 
-	mmap_read_lock(current->mm);
-	do {
-		vma = find_vma(current->mm, start);
-		if (!vma || !vma_is_peer_shared(vma)) {
-			pr_info_ratelimited("gmem: not peer-shared vma, skip dontneed\n");
-			continue;
-		}
-		obj = vma->vm_obj;
-		if (!obj) {
-			pr_err("gmem: peer-shared vma should have vm_object\n");
-			mmap_read_unlock(current->mm);
-			return -EINVAL;
-		}
+	for (; start < end; start += page_size) {
 		xa_lock(obj->logical_page_table);
 		gm_mapping = vm_object_lookup(obj, start);
 		if (!gm_mapping) {
@@ -738,14 +713,65 @@ static int hmadvise_do_eagerfree(unsigned long addr, size_t size)
 			gmf.dev = gm_mapping->dev;
 			ret = gm_mapping->dev->mmu->peer_unmap(&gmf);
 			if (ret) {
-				pr_err("gmem: peer_unmap failed. ret %d\n", ret);
+				pr_err("gmem: peer_unmap failed. ret %d\n",
+				       ret);
 				mutex_unlock(&gm_mapping->lock);
 				continue;
 			}
 		}
 		gm_mapping_flags_set(gm_mapping, GM_PAGE_NOMAP);
 		mutex_unlock(&gm_mapping->lock);
-	} while (start += page_size, start != end);
+	}
+
+	return 0;
+}
+
+static int hmadvise_do_eagerfree(unsigned long addr, size_t size)
+{
+	unsigned long start, end, i_start, i_end;
+	int page_size = HPAGE_SIZE;
+	struct vm_area_struct *vma;
+	int ret = GM_RET_SUCCESS;
+	unsigned long old_start;
+
+	/* overflow */
+	if (check_add_overflow(addr, size, &end))
+		return -EINVAL;
+
+	old_start = addr;
+
+	/* Align addr by rounding inward to avoid excessive page release. */
+	end = round_down(end, page_size);
+	start = round_up(addr, page_size);
+	if (start >= end)
+		return ret;
+
+	/* Check to see whether len was rounded up from small -ve to zero */
+	if (old_start && !start)
+		return -EINVAL;
+
+	mmap_read_lock(current->mm);
+	do {
+		vma = find_vma_intersection(current->mm, start, end);
+		if (!vma) {
+			pr_info("gmem: there is no valid vma\n");
+			break;
+		}
+
+		if (!vma_is_peer_shared(vma)) {
+			pr_debug("gmem: not peer-shared vma, skip dontneed\n");
+			start = vma->vm_end;
+			continue;
+		}
+
+		i_start = start > vma->vm_start ? start : vma->vm_start;
+		i_end = end < vma->vm_end ? end : vma->vm_end;
+		ret = gmem_unmap_vma_pages(vma, i_start, i_end, page_size);
+		if (ret)
+			break;
+
+		start = vma->vm_end;
+	} while (start < end);
 
 	mmap_read_unlock(current->mm);
 	return ret;
@@ -756,6 +782,18 @@ static bool check_hmadvise_behavior(int behavior)
 	return behavior == MADV_DONTNEED;
 }
 
+static inline bool zis_hnode(int node)
+		 {
+				 	return (node < MAX_NUMNODES) && !node_isset(node, node_possible_map) &&
+							       node_isset(node, hnode_map);
+				  }
+ 
+ static inline bool zis_hnode_allowed(int node)
+		 {
+				 	return (node < MAX_NUMNODES) && is_hnode(node) &&
+					       node_isset(node, current->mems_allowed);
+				  }
+
 int hmadvise_inner(int hnid, unsigned long start, size_t len_in, int behavior)
 {
 	int error = -EINVAL;
@@ -774,7 +812,7 @@ int hmadvise_inner(int hnid, unsigned long start, size_t len_in, int behavior)
 	if (hnid < 0)
 		return error;
 
-	if (!is_hnode(hnid) || !is_hnode_allowed(hnid))
+	if (!zis_hnode(hnid) || !zis_hnode_allowed(hnid))
 		return error;
 
 	node = get_hnode(hnid);
