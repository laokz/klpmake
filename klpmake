#!/bin/bash
#
# Klpmake is a linux kernel livepatch making tool.
#
# Copyright (c) 2023 laokz <zhangkai@iscas.ac.cn>
# Klpmake is licensed under Mulan PSL v2.
# You can use this software according to the terms and conditions of
# the Mulan PSL v2. You may obtain a copy of Mulan PSL v2 at:
#          http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES
# OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
# See the Mulan PSL v2 for more details.

set -e
LOCALE=C
KLPMAKE_DIR=$(dirname $0)
ERR_PREFIX="KLPMAKE ERROR:"
KLPSRC_CONF="klpsrc.conf"
cwd=$PWD
klpsyms=_klpmake.syms

function usage()
{
    cat << EOF
Make Linux kernel livepatch.
Before running, you need create a working directory and the name will
be used as the livepatch module name, copy in patch, and edit a
${KLPSRC_CONF} to describe the patch.

KLPMAKE has two stage work, one for generating patch source, another to
generate patch module(.ko). You can do them separately like 'klpmake 1',
'klpmake 2'.

Now only support one patch everytime, either target in-tree or OOT source.
EOF
}

function stage1()
{
	echo "KLPMAKE: trying to generate patch source"
	if [[ ! -e $KLPSRC_CONF ]]; then
		echo $ERR_PREFIX "not found $KLPSRC_CONF"
		usage
		exit 1
	fi

	srcroot=$(grep src-root $KLPSRC_CONF|gawk '{print $2}')
	srcfiles=($(grep src-name $KLPSRC_CONF|gawk '{print $2}'))
	patch=$(ls *.patch)
	cd $srcroot
	patch --backup --suffix=.klpsrc -p1 --fuzz=0 < $cwd/$patch
	for s in ${srcfiles[@]}; do
		mv $s $cwd
		mv $s.klpsrc $s
	done

	cd $cwd
	rm -f $klpsyms
	$KLPMAKE_DIR/klpsrc $(basename $cwd)
	for s in ${srcfiles[@]}; do
		s=$(basename $s)
		mv $s $s.orig
		mv $s.klp $s
	done
	echo "KLPMAKE: OK"
}

function stage2()
{
	echo "KLPMAKE: trying to make 'partial linked' .ko"
	KBUILD_MODPOST_WARN=1 make
	ko=$(ls *.ko)
	mv -f $ko ${ko}.partial
	echo "KLPMAKE: OK"

	echo "KLPMAKE: fixing klp module"
	if [[ -e $klpsyms ]]; then
		$KLPMAKE_DIR/fixklp ${ko}.partial $klpsyms
	else
		mv -f ${ko}.partial $ko
	fi
	#strip -g $ko
	echo "SUCCEED"
}

case $# in
	0)	stage1
		stage2
		;;
	1)	if (($1 == 1)); then
			stage1
		elif (($1 == 2)); then
			stage2
		else
			usage
			exit 2
		fi
		;;
	*)
		usage
		exit 3
		;;
esac
